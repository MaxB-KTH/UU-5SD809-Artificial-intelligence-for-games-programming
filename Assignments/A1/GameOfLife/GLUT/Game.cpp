//---------------------------------------------------------------------
//---------------------------------------------------------------------
//---------------------------------------------------------------------
//  Class Template - Assignment 1.2
//  Artificial Intelligence for Game Programming I - 5SD809
//  Uppsala University
//---------------------------------------------------------------------
//---------------------------------------------------------------------
//---------------------------------------------------------------------
#include "Game.h"
//---------------------------------------------------------------------
//---------------------------------------------------------------------
Game::Game(void){
    //--------------------------------------------
    mW = GRID_SIZE_X * SPACING;
    mH = GRID_SIZE_Y * SPACING;
    mMouseX = mMouseY = 0;
    mMouseButton = mMouseState = 0;
    //--------------------------------------------
    mFrontBufferIdx = 1;
    mM = new bool[2][GRID_SIZE_Y][GRID_SIZE_X];
    //--------------------------------------------
    ResetBuffers();
    //--------------------------------------------
    //Add_Glider(10,10);
    //Add_LightweightSpaceship(5,5);
    Add_GosperGliderGun(5,5);
    //--------------------------------------------
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
Game::~Game(void){delete [] mM;}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Game::ChangeSize(int w, int h){
    mW = w, mH = h;
    glViewport(0,0,mW,mH);                         //Reset Viewport
    glMatrixMode(GL_PROJECTION); glLoadIdentity(); //Reset the Projection Matrix
    glOrtho(0.,double(mW),double(mH),0.,-1.,1.);   //Create Ortho View (0,0 At Top Left)
    glMatrixMode(GL_MODELVIEW); glLoadIdentity();  //Reset the Modelview Matrix
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Game::Draw(void){
    //--------------------------------------------
    glClear(GL_COLOR_BUFFER_BIT);
    glPointSize(12);
    //--------------------------------------------
    int w = GRID_SIZE_X * SPACING;
    int h = GRID_SIZE_Y * SPACING;
    int offsetX = (mW - w + SPACING)/2;
    int offsetY = (mH - h + SPACING)/2;
    //--------------------------------------------
    glBegin(GL_POINTS);
    //--------------------------------------------Grid
    glColor3ub(0, 255, 127);//Green Shade
    For (i,GRID_SIZE_Y) For (j,GRID_SIZE_X){
        if (mM[mFrontBufferIdx][i][j])
            glVertex2f(offsetX + SPACING*j, offsetY + SPACING*i);
    }
    //--------------------------------------------
    glEnd();
    //--------------------------------------------
    UpdateFrontBuffer();
    mFrontBufferIdx = 1 - mFrontBufferIdx;
    std::this_thread::sleep_for(std::chrono::milliseconds(100));
    //--------------------------------------------
    glutSwapBuffers();
    //--------------------------------------------
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------



//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Game::NormalKeys(unsigned char key, int x, int y){
	if (key >= '0' && key <= '9'){}
	if (key == 13){}//Return
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Game::SpecialKeys(int key, int x, int y){
    if (key == GLUT_KEY_LEFT){}
    if (key == GLUT_KEY_RIGHT){}
    if (key == GLUT_KEY_UP){}
    if (key == GLUT_KEY_DOWN){}
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Game::Mouse(int button, int state, int x, int y){
	mMouseButton = button;//GLUT_LEFT_BUTTON/GLUT_MIDDLE_BUTTON/GLUT_RIGHT_BUTTON
	mMouseState = state;//GLUT_DOWN/GLUT_UP
	mGlutGetModifiers = glutGetModifiers();
	mMouseX = x; mMouseY = y;
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------



//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Game::ResetBuffers(){
    For (k,2) For (i,GRID_SIZE_Y) For (j,GRID_SIZE_X){
        mM[k][i][j] = false;}
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Game::Add_Glider(int i, int j){
    char A[][4] = {
        "***",
        "  *",
        " * ",
    };
    For (ii,3) For (jj,3) mM[0][i+ii][j+jj] = A[ii][jj] == '*';
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Game::Add_LightweightSpaceship(int i, int j){
    char A[][6] = {
        " ****",
        "*   *",
        "    *",
        "*  * ",
    };
    For (ii,4) For (jj,5) mM[0][i+ii][j+jj] = A[ii][jj] == '*';
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Game::Add_GosperGliderGun(int i, int j){
    char A[][39] = {
        "                       **         **  ",
        "                      * *         **  ",
        "**       **           **              ",
        "**      * *                           ",
        "        **      **                    ",
        "                * *                   ",
        "                *                     ",
        "                                   ** ",
        "                                   * *",
        "                                   *  ",
        "                                      ",
        "                                      ",
        "                        ***           ",
        "                        *             ",
        "                         *            ",
    };
    For (ii,15) For (jj,38) mM[0][i+ii][j+jj] = A[ii][jj] == '*';
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------



//---------------------------------------------------------------------
//---------------------------------------------------------------------
void Game::UpdateFrontBuffer(){
    //For each cell i and j, with
    //i = 0 ... I-1 and j = 0 ... J-1,
    //evaluate mM[mFrontBufferIdx][i][j] based on previous grid
    //mM[1-mFrontBufferIdx][i][j]
}
//---------------------------------------------------------------------
//---------------------------------------------------------------------